__doc__="""A tool for processing a LaTeX ins and dtx into sty files
"""

# MIT License
#
# Copyright 2019-2021 Keith F Prussing
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

import os
import re

from SCons.Action        import Action
from SCons.Builder       import Builder
from SCons.Tool.pdflatex import PDFLaTeXAuxAction
from SCons.Tool.tex      import tex_pdf_emitter


def _dtx_emitter(target, source, env):
    """An emitter to add additional outputs generated by dtx files
    """
    root, _ = os.path.splitext(str(source[0]))
    target, source = tex_pdf_emitter(target, source, env)
    target.extend([root + x for x in (".ilg", ".ind", ".gls", ".glg")])
    return target, source


def _ins_emitter(target, source, env):
    """Scan the .ins file for the generated files
    """
    basedir = None
    outdir = None
    pattern = r"\\(" + "|".join([
            r"file{\s*(.*?)\s*}\s*{\s*\\from{(.*?)}\s*{.*?}\s*}",
            r"usedir{\s*(.*?)\s*}",
            r"BaseDirectory{\s*(.*?)\s*}"
        ]) + ")"
    with open(str(source[0]), "r") as src:
        ins = re.sub(r"[^\\]%.*", "", src.read())

    flags = re.MULTILINE | re.DOTALL
    for pat, tgt, src, usedir, base in re.findall(pattern, ins, flags):
        if re.match("file", pat):
            target.append(os.path.join(outdir, tgt) if outdir else tgt)
            source.extend([x.strip() for x in src.split(",")])
        elif re.match("usedir", pat) and usedir:
            outdir = os.path.join(basedir, usedir) if basedir \
                                                   else outdir
        elif re.match("BaseDirectory", pat) and base:
            basedir = base
        else:
            # This should never actually happen.
            raise NotImplementedError

    # print("source: {0}".format([str(x) for x in source]))
    # print("target: {0}".format([str(x) for x in target]))
    return target, source


_ins2sty = Builder(action=Action("$INS2STYCOM", "$INS2STYCOMSTR"),
                   emitter=_ins_emitter)


def generate(env):
    """Add the Builders and construction variables to the Environment
    """

    # Add the dtx as an extension for the PDF builder
    env["BUILDERS"]["PDF"].add_action(".dtx", PDFLaTeXAuxAction)
    env["BUILDERS"]["PDF"].add_emitter(".dtx", _dtx_emitter)

    # Add the ins as an extension for the PDF builder
    env["INS2STY"] = env["PDFLATEX"]
    env.SetDefault(
            INS2STYCOM = "$INS2STY ${SOURCE}",
            INS2STYCOMSTR = "",
        )
    env["BUILDERS"]["ins2sty"] = _ins2sty
    env["MAKEINDEXFLAGS"] = "-s gind.ist"
    env["MAKEGLOSSARYSTYLE"] = "gglo.ist"
    return


def exists(env):
    return True

